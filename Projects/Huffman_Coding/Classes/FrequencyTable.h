#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include "Record.h"
#include "Huffman_Tree.h"
#include "Messages.h"
using namespace std;

const int charBits = 8;
const int encodedCharBits = 1;

class FrequencyTable {
private:
	vector<Record> frequencyTable;

	/*Приема като аргументи възел, двойка от символ и стринг и вектор от двойки като определя всеки код на символите*/
	void funcEncoding(const Node*, pair<char, string>, vector<pair<char, string>>&);
	/*Приема като аргументи два еднакви възела, два стринг и число като декодира четейки подадения стринг с
	кодираното съобщение и записва получената буква във втория стринг*/
	void funcDecoding(const Node*, const Node*, string, string&, int&);
	/*Приема като аргумент стринг, който съдържа пътя на файла за четене или писане, и проверява дали такъв файл
	вече съществува*/
	bool checkFileIsExist(string);
	/*Приема като аргумент стринг, който съдържа съобщението за декодиране, и поверява дали това съобщение е
	съставено само от нули и единици*/
	bool checkMessageIsReadyToDecompress(string);

	/*Приема като аргумент символ, създава и записва нов запис в честотната таблица*/
	void pushRecord(char);
	/*Приема като аргумент търсения символ в текущата таблица и връща неговата позиция където се намира*/
	int isExistSymbolReturnPosition(char);
	/*Създава и връща вектор от възли с помощта, на който се построява дървото на Хъфман*/
	vector<Node*> createNodes();
	/*Приема като аргумент позиция и връща записа, намиращ се на тази позиция, от текущата таблица*/
	Record getRecord(int) const;
	/*Приема като аргументи символ и число, създава и добавя запис в текущата таблица, използва се за 
	четенето на таблицата от файла*/
	void addRecord(const char, int);
	/*Приема като аргумент възел, чрез който определя кода на всеки символ, и добавя получения код към символа
	в таблицата*/
	void addCodes(const Node*);
	/*Приема като аргумент стринг от нули и единици и го преобразува от двоична в десетична бройна система*/
	int binaryToDecimal(string);
	/*Приема като аргументи два стринга - първия съдържа съобщението, което трябва да бъде кодирано, а втория - 
	мястото където трябва да се запише кодираното съобщение и извършва това кодиране*/
	void encoding(string, string&);
	/*Приема като аргументи два стринга - първия съдържа съобщението, което трябва да бъде декодирано, а втория -
	мястото където трябва да се запише декодираното съобщение и извършва това декодиране*/
	void decoding(string, string&);	
	/*Приема като аргументи два стринга - първия съдържа оригиналното съобщението, а втория - кодираното съобщение
	и пресмята степента на компресия*/
	int degreeOfCompression(string, string);
	/*Приема като аргумент стринг, който съдържа кодирано съобщение, разделя го на блокове от по 8 бита и извежда
	поредица от числа от 0 до 255*/
	void debugMode(string);
	/*Връща големината на текущата таблица*/
	const int getSize() const;
	/*Принтира на екрана текущата таблица*/
	void print();


	/*Приема като аргумент стринг, в който записва прочетеното съобщение от текстовия файл*/
	void readFromFileEncodingMessage(string&);
	/*Приема като аргумент стринг, който съдържа кодираното съобщение след компресация и го записва в текстов файл*/
	void writeInFileEncodedMessage(string);
	/*Записва в текстов файл текущата честотна таблица*/
	void writeInFileFrequencyTable();
	/*Приема като аргумент стринг, в който записва прочетеното съобщение от текстовия файл*/
	void readEncodedMessageFromFile(string&);
	/*Приема като аргумент булева, проверява дали съществува таблица, с помощта на която да декодира съобщението, и
	ако такава таблица същесвува тогава декодира даденото съобщение, ако не съществува - връща програмата в начален екран*/
	void readFrequencyTableToDecodeMessage(bool&);
	/*Приема като аргумент стринг, който съдържа декодираното съобщение и го записва в текстов файл*/
	void writeInFileDecodedMessage(string);
public:
	FrequencyTable();
	FrequencyTable(const FrequencyTable& other);
	FrequencyTable& operator=(const FrequencyTable&);

	/*Извършва компресацията на съобщението*/
	void compressing();
	/*Извършва декомпресацията на съобщението*/
	void decompressing();
};

